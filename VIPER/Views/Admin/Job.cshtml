
@{
   ViewBag.Title = "Job";
}

<h2>Job</h2>

@(Html.Kendo().Grid<VIPER.Models.ViewModel.JobViewModel>().Name("Job").Columns(c =>
{
    c.Bound(j => j.OpenDate).Width(110).EditorTemplateName("Date").Title("Date").Format("{0:MM/dd/yyyy}");
    c.Bound(j => j.VesselName).Width(220);
    c.Bound(j => j.RepairType).ClientTemplate("#=RepairType.Name#").EditorTemplateName("RepairTypeEditor").Title("Repair Type").Width(160);
    c.Bound(j => j.Size).ClientTemplate("#=Size.Name#").EditorTemplateName("SizeEditor").Title("Size").Width(90);
    c.Bound(j => j.Hour).ClientTemplate("#=Hour.Name#").EditorTemplateName("HourEditor").Title("Hours").Width(100);
    c.Bound(j => j.JobNumber).Title("Job No.").Width(120);
    c.Bound(j => j.Quantity).Title("Qty.").Width(80);
    c.Bound(j => j.ActualProfit).Title("Profit").Width(120).ClientTemplate("#= ChangeCellColor(ActualProfit)#"); ;
    c.Command(command => { command.Destroy(); command.Edit(); }).Width(180);
})
.DataSource(d => d
    .Ajax()
    .Create(create => create.Action("Job_Create", "Admin"))
    .Read(read => read.Action("Job_Read", "Admin"))
    .Update(update => update.Action("Job_Update", "Admin"))
    .Destroy(destroy => destroy.Action("Job_Destroy", "Admin"))
    .Events(events => events.Error("error_handler"))
    .PageSize(10)
    .Model(m =>
    {
        m.Id(j => j.JobID);
        m.Field(j => j.Hour).DefaultValue(new VIPER.Models.ViewModel.HourViewModel());
        m.Field(j => j.RepairType).DefaultValue(new VIPER.Models.ViewModel.RepairTypeViewModel());
        m.Field(j => j.Size).DefaultValue(new VIPER.Models.ViewModel.SizeViewModel());
        m.Field(j => j.ActualProfit).Editable(false);
    })
)
.Scrollable()
.Sortable()
.Filterable()
.Groupable()
.ClientDetailTemplateId("template")
.HtmlAttributes(new { style = "height:700px;" })
.Pageable()
.Editable(e => e.Mode(GridEditMode.InLine))
.ToolBar(t => t.Create())
)

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=JobID#")
            
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Costs").Content(@<text>
                    @(Html.Kendo().Grid<VIPER.Models.ViewModel.JobCostViewModel>()
                        .Name("grid1_#=JobID#")
                        .Columns(c =>
                        {
                            c.Bound(j => j.CostType).Width(140);
                            c.Bound(j => j.Planned).Width(120).Format("{0:C2}");
                            c.Bound(j => j.Actual).Width(120).Title("Actual").Format("{0:C2}");
                            c.Bound(j => j.Difference).Width(120).Format("{0:C2}");
                        })
                        .ToolBar(toolbar =>
                        {
                            toolbar.Save();
                        })
                        .Events(e => e.Edit("Grid1Edit"))
                        .Pageable(p => p.Refresh(true).Numeric(false))
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                            .Batch(true)
                            .Read(read => read.Action("JobCost_Read", "Admin", new { jobID = "#=JobID#" }))
                            .Update("JobCost_Update", "Admin")
                            .Model(m =>
                            {
                                m.Id(jp => jp.PivotJobID);
                                m.Field(j => j.CostType).Editable(false);
                                m.Field(j => j.Difference).Editable(false);
                            })
                         )
                         .HtmlAttributes(new { style = "width:500px;" })
                         .ToClientTemplate())
                </text>
                );
                items.Add().Text("Scheduling").Content(@<text>
                    @(Html.Kendo().Grid<VIPER.Models.ViewModel.JobScheduleViewModel>()
                            .Name("grid2_#=JobID#")
                            .Columns(columns =>
                            {
                                columns.Bound(j => j.ReceivedDate).Width(120).EditorTemplateName("Date").Format("{0:MM/dd/yyyy}");
                                columns.Bound(j => j.StartDate).Width(200).EditorTemplateName("DateTime").Format("{0:MM/dd/yyyy h:mm tt}");
                                columns.Bound(j => j.PromiseDate).Width(120).EditorTemplateName("Date").Format("{0:MM/dd/yyyy}");
                                columns.Bound(j => j.ShipDate).Width(120).EditorTemplateName("Date").Format("{0:MM/dd/yyyy}");
                                columns.Bound(j => j.CompletionDate).Width(200).EditorTemplateName("DateTime").Format("{0:MM/dd/yyyy h:mm tt}");
                                columns.Bound(j => j.TurnTime).Width(100);
                            })
                            .ToolBar(toolbar =>
                            {
                                toolbar.Save();
                            })
                            .Editable(editable => editable.Mode(GridEditMode.InCell))
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .ServerOperation(false)
                                .Read(read => read.Action("JobSchedule_Read", "Admin", new { jobID = "#=JobID#" }))
                                .Update("JobSchedule_Update", "Admin")
                                .Model(m =>
                                {
                                    m.Id(jp => jp.JobID);
                                    m.Field(jp => jp.TurnTime).Editable(false);
                                })
                             )
                            .HtmlAttributes(new { style = "width:860px;" })
                            .ToClientTemplate())

                </text>
                );
                items.Add().Text("Process").Content(@<text>
                    @(Html.Kendo().Grid<VIPER.Models.ViewModel.JobProcessViewModel>()
                        .Name("grid3_#=JobID#")
                        .Columns(columns =>
                        {
                            columns.Bound(jp => jp.ProcessName).Width(150);
                            columns.Bound(jp => jp.PlannedTime).Title("Planned").Width(100);
                            columns.Bound(jp => jp.ActualTime).Title("Actual").Width(100);
                            columns.Bound(jp => jp.ReworkTime).Title("Rework").Width(100);
                            columns.Bound(jp => jp.Difference).Width(100); 
                            columns.Bound(jp => jp.ScheduleWeek).Width(160);
                            columns.Bound(jp => jp.Note).Width(300);
                        })
                        .ToolBar(toolbar =>
                        {
                            toolbar.Save();
                        })
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Read(read => read.Action("JobProcess_Read", "Admin", new { jobID = "#=JobID#" }))
                            .Update("JobProcess_Update", "Admin")
                            .Model(m =>
                            {
                                m.Id(jp => jp.JobProcessID);
                                m.Field(jp => jp.ProcessName).Editable(false);
                                m.Field(jp => jp.Difference).Editable(false);
                            })
                        )
                        .HtmlAttributes(new { style = "width:1010px;" })
                        .ToClientTemplate())
                    </text>
                    );         
            })
            .ToClientTemplate())
</script>

<script type="text/kendo-template" id="message">
    <div class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error"
         style="margin: 0.5em; display: block; " data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
        <span class="k-icon k-warning"> </span>#=message#<div class="k-callout k-callout-n"></div>
    </div>
</script>

<script type="text/javascript">
    var validationMessageTmpl = kendo.template($("#message").html());

    function error_handler(args) {
        if (args.errors) {
            var grid = $("#Job").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();   // cancel grid rebind if error occurs                             

                for (var error in args.errors) {
                    showMessage(grid.editable.element, error, args.errors[error].errors);
                }
            });
        }
        //if (e.errors) {
        //    var message = "Errors:\n";
        //    $.each(e.errors, function (key, value) {
        //        if ('errors' in value) {
        //            $.each(value.errors, function () {
        //                message += this + "\n";
        //            });
        //        }
        //    });
        //    alert(message);
        //}
    }

    function showMessage(container, name, errors) {
        var end = name.indexOf(".");
        name = name.slice(0, end);
        //add the validation message to the form
        container.find("[data-valmsg-for=" + name + "],[data-val-msg-for=" + name + "]")
                 .replaceWith(validationMessageTmpl({ field: name, message: errors[0] }))
    }

    function Grid1Edit(e) {
        if (e.model.PivotJobID == 5 || e.model.PivotJobID == 6 || e.model.PivotJobID == 7 || e.model.PivotJobID == 8) {
            this.closeCell();
        }
    }

    

    function filterSizes() {
        return {
            RepairTypeID: $("#RepairType").val()
        };
    }

    function ChangeCellColor(Difference) {
        if (Difference > 0) {
            return "<div style='background: green'>" + Difference + " </div>";
        }
        else {
            return "<div style='background: red'>" + Difference + " </div>";
        }
        }   
</script>