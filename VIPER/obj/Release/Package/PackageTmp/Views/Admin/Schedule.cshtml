
@{
    ViewBag.Title = "Schedule";
}

<h2>Schedule</h2>

@(Html.Kendo().Gantt<VIPER.Models.ViewModel.ScheduleViewModel, VIPER.Models.ViewModel.DependencyViewModel>()
    .Name("gantt")
    .Columns(columns =>
    {
        //columns.Bound(c => c.TaskID).Title("ID").Width(50);
        columns.Bound("title").Editable(false).Sortable(true);
        //columns.Resources("resources").Editable(true).Title("Assigned Resources");
        //columns.Bound("start").Title("Start Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(true).Sortable(true);
        //columns.Bound("end").Title("End Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(true).Sortable(true);
    })
    .Views(views =>
    {
        views.DayView();
        views.WeekView(weekView => weekView.Selected(true));
        views.MonthView();
    })
    .Height(800)
    .ShowWorkHours(false)
    .ShowWorkDays(false)
    .Snap(false)
    .DataSource(d => d
        .Model(m =>
        {
            m.Id(f => f.TaskID);
            m.ParentId(f => f.ParentID);
            m.OrderId(f => f.OrderId);
            m.Field(f => f.Expanded).DefaultValue(true);
        })
        .Read("ReadJobs", "Admin")
        .Update("UpdateJobs", "Admin")
    )
        //.DependenciesDataSource(d => d
        //    .Model(m =>
        //    {
        //        m.Id(f => f.DependencyID);
        //        m.PredecessorId(f => f.PredecessorID);
        //        m.SuccessorId(f => f.SuccessorID);
        //        m.Type(f => f.Type);
        //    })
        //    .Read("ReadDependencies", "Gantt")
        //    .Create("CreateDependency", "Gantt")
        //    .Destroy("DestroyDependency", "Gantt")
        //    .Update("UpdateDependency", "Gantt")
        //)
         .Resources(r => r
            .Field("resources")
            .DataColorField("Color")
            .DataTextField("Name")
            .DataSource(d => d
                .Custom()
                .Schema(s => s
                    .Model(m => m.Id("ID"))
                    .Data("Data")
                )
                .Transport(t =>
                {
                     t.Read("ReadResources", "Admin");
                })
            )
         )
        // .Assignments<ResourceAssignmentViewModel>(a => a
        //    .DataTaskIdField("TaskID")
        //    .DataResourceIdField("ResourceID")
        //    .DataValueField("Units")
        //    .DataSource(d => d
        //        .Model(m =>
        //        {
        //            m.Id(f => f.ID);
        //        })
        //        .Read("ReadAssignments", "Gantt")
        //        .Create("CreateAssignment", "Gantt")
        //        .Destroy("DestroyAssignment", "Gantt")
        //        .Update("UpdateAssignment", "Gantt")
        //    )
        //)
)

